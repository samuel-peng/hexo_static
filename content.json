{"meta":{"title":"Samuel Peng","subtitle":"Programming Log","description":null,"author":"Samuel Peng","url":"http://samuelpeng.com/blog"},"pages":[{"title":"About Me","date":"2018-07-07T07:54:46.000Z","updated":"2018-07-07T04:57:58.327Z","comments":true,"path":"about/index.html","permalink":"http://samuelpeng.com/blog/about/index.html","excerpt":"","text":"I’m Samuel Peng, and I am a…Programmer.I am interested in &amp; work with: C++ Swift JavaScript Python Java I’ve been involved in: Hackathons iOS Development Web Development More… Singer-SongwriterVisit my website @ joelsparksmusic.com to learn more about the music I make. Neflix LoverI love watching… Grey’s Anatomy Scandal Criminal Minds Person of Interest Sherlock House of Cards … Contact me? Telegram: @sjpeng GitHub: samuel-peng Twitter: @samueljpeng Email: samuelpeng1@gmail.com"}],"posts":[{"title":"Word Ladder","slug":"word-ladder","date":"2018-07-08T00:10:20.000Z","updated":"2018-07-09T00:34:43.184Z","comments":true,"path":"2018/07/08/word-ladder/","link":"","permalink":"http://samuelpeng.com/blog/2018/07/08/word-ladder/","excerpt":"","text":"You know it, the classic word ladder problem. It turns out to be part 1 of my second assignment at Stanford&nbsp;University.For those of you who don’t know about word ladder (I doubt there is any), here’s a condensed version of the problem description. Input: a dictionary file and two words.Objective: find a path to go from the first word to the second, by changing one letter each time.Output: the path from word 1 to word two. Simple enough. However, the problem requires the program not to use recursion but use BFS to accomplish such task.It’s a fairly easy problem, and the pseudocode was even given to us: to find a path from word 1 to word 2:&nbsp;&nbsp;&nbsp;&nbsp;create a queue of stacks, initially containing only a single stack storing {word 1}.&nbsp;&nbsp;&nbsp;&nbsp;loop until queue is empty (can’t find the path) or word 2 is found:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dequeue a stack s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for each valid unused English word w that differs by 1 letter of the word on top of s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create a new stack s2 whose contents are s + w added on top&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add s2 to the queue However, there is a pretty serious issue to consider with this problem, and that is the size of the dictionary. The dictionary file contains nearly .27 million words in it. Although efficient data types will be used to handle them, the fact that there are so many possible “next words” for each word is frightening. The queue that stores the stacks builds up too quickly that the memory it needs can’t be ignored. With only a 5-letter word example that should take merely 9 steps to finish, I get an error message: A C++ exception occurred during program execution:std::bad_allocStack trace:vector.h Vector::operator=(Vector const&amp;)queue.h Queue::expandRingBufferCapacity()queue.h Queue::enqueue(Stack const&amp;)wordladder.cpp game(Set const&amp;, string, string)wordladder.cpp interact()wordladder.cpp main() It appears that while trying to expand RingBufferCapacity, the memory decided that there’s not enough usable memory to allocate for my program, therefore it shut down.Instead of blaming my computer, which is not crappy at all considering the fact that it has 16 GB of memory, for not having enough memory to run this program, I decided to look into the codes and see if there’s any way to optimize it so that it won’t ask for that much memory. It’s not so hard to realize that taking a humongous amount of memory is one of the characteristics of the BFS algorithm. Then the problem comes to how to alter the BFS algorithm to make it cost less memory, and one of the basic ways to optimize BFS is: bidirectional BFS. With that name, it’s pretty obvious how it works. BFS from both sides. When the two words are given, the program use BFS to search from both the word 1 side and the word 2 side, level by level. When they find a word in common, the shortest path has been found. You can try to visually imagine how much memory and time this is going to save, and it does save both significantly. However, with the implementation of bidirectional BFS, another problem emerges: the case when no word ladder can be found. I guess it’s also not hard to imagine. Previously, a huge queue of stacks will be generated, and when it becomes empty, it shows that no path can be found between these two words. With bidirectional BFS, two huge queues of stacks will be generated to determine if there is a path between the given words. Just as I felt so desperate that I couldn’t find a solution for it, I realized why not utilize DFS(Depth-First Search). So, I wrote a new bool funtion called ‘exist()’ using DFS to see if there is a path between the two given words. Since we only care about if there is a path, DFS does the job. Although it might have found the not-shortest path, but that’s not the path we’ll be outputing, since our bidirectional BFS function is the function that’ll tell us the shortest path between the two words, if any. With DFS + Bidirectional BFS, the program now runs swiftly fast. What previously takes more than 20 seconds can now be solved in about a second. Woo-Hoo! Problem solved! The code is attached down below, however, Stanford Honor Code does strictly forbid looking at others’ codes. If this is your homework problem, now you know my approach. Try write it out yourself! If you can’t figure it out, go to office hours! Just DO NOT LOOK AT THE CODE if you’re taking the class. Cheers~ See the code hereinclude &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;algorithm&gt;#include \"filelib.h\"#include \"set.h\"#include \"queue.h\"#include \"stack.h\"#include \"simpio.h\"#include \"console.h\"using namespace std;void welcomePrint();//Printing the welcome informationbool lengthCheck(const string &amp;from, const string &amp;to);//return true if the two given words are not of the same lengthbool dictCheck(const Set&lt;string&gt; &amp;dict, const string &amp;from, const string &amp;to);//return true if either or both words don't exist in the dictionarybool wordCheck(const string &amp;from, const string &amp;to);//return true if both words are the samebool exist(const Set&lt;string&gt; &amp;dic, const string &amp;from, const string &amp;to);//Uses DFS to determine if a valid ladder exists//return true if a ladder exist from word 1 to word 2void generateLadder(Queue&lt;Stack&lt;string&gt;&gt; &amp;revSolve, Stack&lt;string&gt; &amp;cur, const string &amp;midWord, string &amp;ladder, bool side);//Generate the string 'ladder' to print outvoid BFS(const Set&lt;string&gt; &amp;dictionary, Queue&lt;Stack&lt;string&gt;&gt; &amp;solve, Queue&lt;Stack&lt;string&gt;&gt; &amp;rSolve, Set&lt;string&gt; &amp;level, string &amp;ladder, bool side);//Breadth-First Search function of the given sidestring game(const Set&lt;string&gt; &amp;dic, const string &amp;from, const string &amp;to);//The function that does the main calculationsvoid interact();//for interaction. Takes in inputs, calls the calculation function.int main() &#123; welcomePrint(); interact(); cout &lt;&lt; \"Have a nice day.\" &lt;&lt; endl; return 0;&#125;void welcomePrint() &#123; cout &lt;&lt; \"Welcome to CS 106B/X Word Ladder!\" &lt;&lt; endl; cout &lt;&lt; \"Please give me two English words, and I will convert the\" &lt;&lt; endl; cout &lt;&lt; \"first into the second by modifying one letter at a time.\" &lt;&lt; endl &lt;&lt; endl;&#125;bool lengthCheck(const string &amp;from, const string &amp;to) &#123; return from.length() != to.length();&#125;bool dictCheck(const Set&lt;string&gt; &amp;dict, const string &amp;from, const string &amp;to) &#123; return !(dict.contains(from) &amp;&amp; dict.contains(to));&#125;bool wordCheck(const string &amp;from, const string &amp;to) &#123; return from == to;&#125;bool exist(const Set&lt;string&gt; &amp;dic, const string &amp;from, const string &amp;to) &#123; //Use DFS to search if path exists Stack&lt;string&gt; tracking = &#123;from&#125;; //Stack of DFS process Set&lt;string&gt; trackMember = &#123;from&#125;; //All visited members Stack&lt;int&gt; index = &#123;0&#125;; //indicating which letter of the word to change &amp; to what letter //index / 26 = loc @ word; index % 26 = letter in alphabet; while(!tracking.isEmpty())&#123; string lastWord = tracking.peek(); if(index.peek() &lt; lastWord.length() * 26) &#123; string newWord = lastWord; newWord.replace(index.peek() / 26, 1, 1, char(index.peek() % 26 + 97)); if(newWord == to) return true; //found target word. ladder exists. if(dic.contains(newWord) &amp;&amp; !trackMember.contains(newWord))&#123; //valid nextWord. Push into stack //move one level deeper. tracking.push(newWord); trackMember.add(newWord); index.push(0); &#125; else &#123; //invalid nextWord //move on to the next possible nextWord index.push(index.pop() + 1); &#125; &#125; else &#123; //all possible nextwords is visited. //move back to the previous word in stack. index.pop(); tracking.pop(); &#125; &#125; return false;&#125;void generateLadder(Queue&lt;Stack&lt;string&gt;&gt; &amp;revSolve, Stack&lt;string&gt; &amp;cur, const string &amp;midWord, string &amp;ladder, bool side) &#123; if (side) &#123; //Ladder found with solveFront &amp; toLevel //Add the front part (word 1 side) to 'ladder' for(string path : cur) &#123; ladder += path; ladder += \" \"; &#125; //Add the second part (word 2 side) to 'ladder' for(Stack&lt;string&gt; item : revSolve) &#123; if(item.peek() == midWord) &#123; Stack&lt;string&gt; reverse; int stackSize = item.size(); for (int loc = 0 ; loc &lt; stackSize ; loc++) &#123; reverse.push(item.pop()); &#125; for (string str : reverse) &#123; ladder += str; ladder += \" \"; &#125; break; &#125; &#125; &#125; else &#123; //Ladder found with solveTo &amp; fromLevel //Add the front part (word 1 side) to 'ladder' for(Stack&lt;string&gt; item : revSolve) &#123; if(item.peek() == midWord) &#123; for (string str : item) &#123; ladder += str; ladder += \" \"; &#125; break; &#125; &#125; //Generate the string for the second part (word 2 side) string halfResult; for(string path : cur) &#123; halfResult = path + \" \" + halfResult; &#125; ladder += halfResult;//Combine two parts to 'ladder' &#125;&#125;void BFS(const Set&lt;string&gt; &amp;dictionary, Queue&lt;Stack&lt;string&gt;&gt; &amp;solve, Queue&lt;Stack&lt;string&gt;&gt; &amp;rSolve, Set&lt;string&gt; &amp;level, string &amp;ladder, bool side) &#123; int qSize = solve.size(); //Size of the Queue for(int i = 0 ; i &lt; qSize ; i++) &#123; //Loop through the Queue Stack&lt;string&gt; current = solve.dequeue(); //Get item from Queue string lastWord = current.peek(); //Peek the top word of the current Stack Set&lt;string&gt; cont = &#123;&#125;; //To store words already contained in the Stack int cSize = current.size(); //size of the current Stack //Add all the items of the Stack to the Set 'cont' for(int t = 0 ; t &lt; cSize ; t++) &#123; string temp = current.pop(); cont.add(temp); current.push(temp); &#125; //Listing all possible 'nextWords' for(int c = 0 ; c &lt; lastWord.length() ; c++) &#123; for(int a = 97 ; a &lt; 123 ; a++) &#123; string newWord = lastWord; newWord.replace(c, 1, 1, char(a)); //replacing the c-th character of the word to char(a) (by ascii) if(dictionary.contains(newWord) &amp;&amp; !cont.contains(newWord)) &#123; //new word is a valid word if (level.contains(newWord)) &#123; //shortest ladder found generateLadder(rSolve, current, newWord, ladder, side); return; &#125; current.push(newWord); //Add the valid word to the current stack solve.enqueue(current); //Add the stack back into the back of the queue current.pop(); //Remove the word from the stack &#125; &#125; &#125; &#125;&#125;string game(const Set&lt;string&gt; &amp;dic, const string &amp;from, const string &amp;to) &#123; Queue&lt;Stack&lt;string&gt;&gt; solveFrom; //Stores the information for the word 1 side Queue&lt;Stack&lt;string&gt;&gt; solveTo; //Stores the information for the word 2 side Set&lt;string&gt; fromLevel = &#123;to&#125;, toLevel = &#123;from&#125;; //Stores the words visited by each side string ladder = \"\"; //The result string to return solveFrom.add(&#123;to&#125;); //Initialize solveTo.add(&#123;from&#125;); //Initialize while(!solveFrom.isEmpty() &amp;&amp; !solveTo.isEmpty())&#123; //Search from word 1 side BFS(dic, solveFrom, solveTo, toLevel, ladder, true); if(ladder != \"\") return ladder; //Ladder found //Update word 1 side visited-word pool for(Stack&lt;string&gt; item : solveFrom) &#123; fromLevel.add(item.peek()); &#125; //Search from word 2 side BFS(dic, solveTo, solveFrom, fromLevel, ladder, false); if(ladder != \"\") return ladder; //Ladder found //Update word 2 side visited-word pool for(Stack&lt;string&gt; item : solveTo) &#123; toLevel.add(item.peek()); &#125; &#125; return \"NA\";&#125;void interact() &#123; ifstream infile; promptUserForFile(infile, \"Dictionary file name: \"); Set&lt;string&gt; dict; string dictWord; while(getline(infile, dictWord)) &#123; dict.add(dictWord); &#125; infile.close(); while (1) &#123; string fromWord, toWord; cout &lt;&lt; endl; fromWord = getLine(\"Word 1 (or Enter to quit): \"); if (fromWord == \"\") break; transform(fromWord.begin(), fromWord.end(), fromWord.begin(), ::tolower); toWord = getLine(\"Word 2 (or Enter to quit): \"); if (toWord == \"\") break; transform(toWord.begin(), toWord.end(), toWord.begin(), ::tolower); if(lengthCheck(fromWord, toWord)) &#123; cout &lt;&lt; \"The two words must be the same length.\" &lt;&lt; endl; continue; &#125; else if (dictCheck(dict, fromWord, toWord)) &#123; cout &lt;&lt; \"The two words must be found in the dictionary.\" &lt;&lt; endl; continue; &#125; else if (wordCheck(fromWord, toWord)) &#123; cout &lt;&lt; \"The two words must be different.\" &lt;&lt; endl; continue; &#125; else &#123; if (!exist(dict, fromWord, toWord)) &#123; cout &lt;&lt; \"No word ladder found from \" &lt;&lt; toWord &lt;&lt; \" back to \" &lt;&lt; fromWord &lt;&lt; \".\" &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; \"A ladder from \" &lt;&lt; toWord &lt;&lt; \" back to \" &lt;&lt; fromWord &lt;&lt; \":\" &lt;&lt; endl; cout &lt;&lt; game(dict, fromWord, toWord) &lt;&lt; endl; &#125; &#125; &#125;&#125;","categories":[{"name":"Programming","slug":"Programming","permalink":"http://samuelpeng.com/blog/categories/Programming/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://samuelpeng.com/blog/tags/C/"},{"name":"BFS","slug":"BFS","permalink":"http://samuelpeng.com/blog/tags/BFS/"},{"name":"Classic","slug":"Classic","permalink":"http://samuelpeng.com/blog/tags/Classic/"},{"name":"Stanford","slug":"Stanford","permalink":"http://samuelpeng.com/blog/tags/Stanford/"}]}]}